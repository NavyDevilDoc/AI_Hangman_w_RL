# word_lists.py

def get_hangman_words():
    word_list = [
        'apple', 'orange', 'grape', 'mango', 'pear', 'plum', 'quince', 'berry', 'cherry',
        'melon', 'date', 'lemon', 'lime', 'peach', 'apricot', 'coconut', 'fig', 'guava',
        'kiwi', 'papaya', 'almond', 'pecan', 'walnut', 'cashew', 'tomato', 'potato',
        'onion', 'carrot', 'radish', 'beet', 'celery', 'pepper', 'yam', 'turnip',
        'cabbage', 'lettuce', 'spinach', 'kale', 'ginger', 'garlic', 'zucchini',
        'cucumber', 'olive', 'avocado', 'banana', 'pineapple', 'raisin', 'peanut',
        'chestnut', 'hazelnut', 'pumpkin', 'squash', 'blueberry', 'cranberry', 'strawberry',
        'artichoke', 'eggplant', 'broccoli', 'cauliflower', 'asparagus', 'parsley',
        'coriander', 'oregano', 'thyme', 'rosemary', 'tarragon', 'sage', 'chives', 'mint',
        'dill', 'cumin', 'curry', 'turmeric', 'paprika', 'saffron', 'cayenne', 'anise',
        'cardamom', 'cloves', 'nutmeg', 'cinnamon', 'vanilla', 'allspice', 'fennel',
        'mustard', 'peppercorn', 'sesame', 'poppy', 'caraway', 'juniper', 'chili',
        'wasabi', 'horseradish', 'capers', 'cilantro', 'basil', 'leek', 'scallion',
        'shallot', 'parsnip', 'rhubarb', 'bamboo', 'watercress', 'sprouts', 'arugula', 
        'tiger', 'zebra', 'koala', 'badger', 'otter', 'beaver', 'weasel', 'wombat',
        'gopher', 'ferret', 'skunk', 'shrew', 'ocelot', 'jaguar', 'panther', 'cougar',
        'leopard', 'cheetah', 'hyena', 'lynx', 'moose', 'elk', 'reindeer', 'gazelle',
        'impala', 'buffalo', 'ostrich', 'peacock', 'pelican', 'seagull', 'sparrow',
        'pigeon', 'parrot', 'penguin', 'eagle', 'hawk', 'falcon', 'raven', 'swan',
        'goose', 'crane', 'heron', 'osprey', 'kestrel', 'vulture', 'condor', 'grouse',
        'puffin', 'cormorant', 'ibis', 'dove', 'emu', 'kite', 'owl', 'quetzal',
        'finch', 'robin', 'tern', 'thrush', 'toucan', 'warbler', 'wren', 'starling',
        'swallow', 'oriole', 'crow', 'jay', 'lark', 'loon', 'merlin', 'plover', 'lapwing',
        'kingfish', 'avocet', 'murre', 'pochard', 'sandpiper', 'snipe', 'stilt', 'grebe',
        'tropic', 'shearwater', 'petrel', 'coot', 'bittern', 'hobby', 'curlew', 'egret',
        'flamingo', 'gannet', 'godwit', 'guillemot', 'harrier', 'jaeger', 
        'magpie',"hydrogen", "helium", "lithium", "beryllium", "boron", "carbon", "nitrogen", "oxygen", "fluorine", "neon",
        "sodium", "magnesium", "aluminum", "silicon", "phosphorus", "sulfur", "chlorine", "argon", "potassium", "calcium",
        "scandium", "titanium", "vanadium", "chromium", "manganese", "iron", "cobalt", "nickel", "copper", "zinc",
        "gallium", "germanium", "arsenic", "selenium", "bromine", "krypton", "rubidium", "strontium", "yttrium", "zirconium",
        "niobium", "molybdenum", "technetium", "ruthenium", "rhodium", "palladium", "silver", "cadmium", "indium", "tin",
        "antimony", "tellurium", "iodine", "xenon", "cesium", "barium", "lanthanum", "cerium", "praseodymium", "neodymium",
        "promethium", "samarium", "europium", "gadolinium", "terbium", "dysprosium", "holmium", "erbium", "thulium", "ytterbium",
        "lutetium", "hafnium", "tantalum", "tungsten", "rhenium", "osmium", "iridium", "platinum", "gold", "mercury",
        "thallium", "lead", "bismuth", "polonium", "astatine", "radon", "francium", "radium", "actinium", "thorium",
        "protactinium", "uranium", "neptunium", "plutonium", "americium", "curium", "berkelium", "californium", "einsteinium", "fermium",
        "mendelevium", "nobelium", "lawrencium", "rutherfordium", "dubnium", "seaborgium", "bohrium", "hassium", "meitnerium", "darmstadtium",
        "roentgenium", "copernicium", "nihonium", "flerovium", "moscovium", "livermorium", "tennessine", "oganesson",
        "people", "world", "school", "program", "problem", "family", 
        "health", "service", "change", "nation", "create", "public", "follow", 
        "during", "present", "without", "office", "point", "client", "become", 
        "product", "project", "matter", "person", "policy", "result", "report", 
        "figure", "friend", "begin", "design", "always", "several", "growth", 
        "nature", "around", "provide", "control", "teacher", "develop", "effect", 
        "return", "research", "company", "market", "though", "thanks", "specific", 
        "society", "general", "subject", "history", "picture", "similar", "degree", 
        "action", "accept", "almost", "enough", "website", "explain", "require", 
        "entire", "career", "rather", "regard", "choice", "future", "medical", 
        "single", "chance", "theory", "within", "window", "answer", "increase", 
        "farmer", "leader", "remain", "system", "success", "season", "purpose", 
        "either", "recent", "reflect", "discuss", "agreed", "method", "beyond", 
        "happen", "animal", "factor", "decide", "indeed", "inside", "nearly", "energy"]

    return word_list


'''
# Helper snippet for finding duplicate words
my_list = []
unique_set = set()
unique_list = []
duplicates = []

for item in my_list:
    if item not in unique_set:
        unique_set.add(item)
        unique_list.append(item)
    else:
        duplicates.append(item)

print(f"Duplicates: {duplicates}")
print(f"Unique list: {unique_list}")
'''
